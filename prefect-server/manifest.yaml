---
# Source: prefect-server/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prefect-serviceaccount
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
---
# Source: prefect-server/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: prefect-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.16
    app.kubernetes.io/instance: prefect
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "cVpSUVc0MlRZSg=="
  password: "cHJlZmVjdA=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: prefect-server/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: prefect-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.16
    app.kubernetes.io/instance: prefect
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: prefect
    app.kubernetes.io/component: primary
---
# Source: prefect-server/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: prefect-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.16
    app.kubernetes.io/instance: prefect
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: prefect
    app.kubernetes.io/component: primary
---
# Source: prefect-server/templates/apollo/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: prefect-apollo
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: apollo
  annotations:
    {}
spec:
  type: LoadBalancer
  ports:
    - port: 4200
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect
    app.kubernetes.io/component: apollo
---
# Source: prefect-server/templates/graphql/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: prefect-graphql
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: graphql
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 4201
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect
    app.kubernetes.io/component: graphql
---
# Source: prefect-server/templates/hasura/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: prefect-hasura
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: hasura
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect
    app.kubernetes.io/component: hasura
---
# Source: prefect-server/templates/ui/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: prefect-ui
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ui
  annotations:
    {}
spec:
  type: LoadBalancer
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect
    app.kubernetes.io/component: ui
---
# Source: prefect-server/templates/apollo/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prefect-apollo
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: apollo
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prefect-server
      app.kubernetes.io/instance:  prefect
      app.kubernetes.io/component: apollo
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prefect-server
        app.kubernetes.io/instance:  prefect
        app.kubernetes.io/component: apollo
    spec:
      serviceAccountName: prefect-serviceaccount
      containers:
        - name: apollo
          image: "prefecthq/apollo:latest"
          imagePullPolicy: Always
          command:
            - bash
            - "-c"
            - "/apollo/post-start.sh && npm run serve"
          env:
            - name: HASURA_API_URL
              value: http://prefect-hasura.default:3000/v1alpha1/graphql
            - name: PREFECT_API_URL
              value: http://prefect-graphql.default:4201/graphql/
            - name: PREFECT_API_HEALTH_URL
              value: http://prefect-graphql.default:4201/health
            - name: GRAPHQL_SERVICE_HOST
              value: "http://prefect-graphql.default"
            - name: GRAPHQL_SERVICE_PORT
              value: "4201"
            - name: PREFECT_SERVER__API__URL
              value: http://prefect-hasura.default:3000/v1alpha1/graphql
            - name: PREFECT_SERVER__DATABASE__HOST
              value: prefect-postgresql.default
            - name: PREFECT_SERVER__DATABASE__PORT
              value: 
            - name: PREFECT_SERVER__DATABASE__USERNAME
              value: 
            - name: PREFECT_SERVER__DATABASE__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: prefect-postgresql
                  key: postgres-password
            - name: PREFECT_SERVER__HASURA__HOST
              value: prefect-hasura.default
            - name: PREFECT_SERVER__HASURA__PORT
              value: "3000"
            - name: PREFECT_SERVER__SERVICES__APOLLO__PORT
              value: "4200"
            - name: PREFECT_SERVER__SERVICES__GRAPHQL__PORT
              value: "4201"
          ports:
            - name: http
              containerPort: 4200
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /.well-known/apollo/server-health
              port: http
          readinessProbe:
            httpGet:
              path: /.well-known/apollo/server-health
              port: http
---
# Source: prefect-server/templates/graphql/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prefect-graphql
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: graphql
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prefect-server
      app.kubernetes.io/instance:  prefect
      app.kubernetes.io/component: graphql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prefect-server
        app.kubernetes.io/instance:  prefect
        app.kubernetes.io/component: graphql
    spec:
      serviceAccountName: prefect-serviceaccount
      initContainers:
        - name: db-upgrade
          image: "prefecthq/server:latest"
          imagePullPolicy: Always
          command:
            - "bash"
            - "-c"
            - "/usr/local/bin/prefect-server database upgrade --yes"
          env:
            - name: PREFECT_SERVER__DATABASE__CONNECTION_URL
              value: postgresql://prefect@prefect-postgresql.default:5432/prefect
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: prefect-postgresql
                  key: postgres-password
            - name: PREFECT_SERVER__API__URL
              value: http://prefect-hasura.default:3000/v1alpha1/graphql
            - name: PREFECT_SERVER__DATABASE__HOST
              value: prefect-postgresql.default
            - name: PREFECT_SERVER__DATABASE__PORT
              value: 
            - name: PREFECT_SERVER__DATABASE__USERNAME
              value: 
            - name: PREFECT_SERVER__DATABASE__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: prefect-postgresql
                  key: postgres-password
            - name: PREFECT_SERVER__HASURA__HOST
              value: prefect-hasura.default
            - name: PREFECT_SERVER__HASURA__PORT
              value: "3000"
            - name: PREFECT_SERVER__SERVICES__APOLLO__PORT
              value: "4200"
            - name: PREFECT_SERVER__SERVICES__GRAPHQL__PORT
              value: "4201"
      containers:
        - name: graphql
          image: "prefecthq/server:latest"
          imagePullPolicy: Always
          command: 
            - bash 
            - "-c" 
            - "python src/prefect_server/services/graphql/server.py"
          env:
            - name: PREFECT_SERVER_DB_CMD
              value: "echo 'DATABASE MIGRATIONS SKIPPED'"
            - name: PREFECT_SERVER__DATABASE__CONNECTION_URL
              value: postgresql://prefect@prefect-postgresql.default:5432/prefect
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: prefect-postgresql
                  key: postgres-password
            - name: PREFECT_SERVER__API__URL
              value: http://prefect-hasura.default:3000/v1alpha1/graphql
            - name: PREFECT_SERVER__DATABASE__HOST
              value: prefect-postgresql.default
            - name: PREFECT_SERVER__DATABASE__PORT
              value: 
            - name: PREFECT_SERVER__DATABASE__USERNAME
              value: 
            - name: PREFECT_SERVER__DATABASE__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: prefect-postgresql
                  key: postgres-password
            - name: PREFECT_SERVER__HASURA__HOST
              value: prefect-hasura.default
            - name: PREFECT_SERVER__HASURA__PORT
              value: "3000"
            - name: PREFECT_SERVER__SERVICES__APOLLO__PORT
              value: "4200"
            - name: PREFECT_SERVER__SERVICES__GRAPHQL__PORT
              value: "4201"
          ports:
            - name: http
              containerPort: 4201
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
---
# Source: prefect-server/templates/hasura/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prefect-hasura
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: hasura
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prefect-server
      app.kubernetes.io/instance:  prefect
      app.kubernetes.io/component: hasura
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prefect-server
        app.kubernetes.io/instance:  prefect
        app.kubernetes.io/component: hasura
    spec:
      serviceAccountName: prefect-serviceaccount
      containers:
        - name: hasura
          image: hasura/graphql-engine:v2.1.1
          imagePullPolicy: IfNotPresent
          command:
            - "graphql-engine" 
            - "serve"
          env:
            - name: HASURA_GRAPHQL_DATABASE_URL
              value: postgresql://prefect@prefect-postgresql.default:5432/prefect
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: prefect-postgresql
                  key: postgres-password            
            - name: HASURA_GRAPHQL_ENABLE_CONSOLE
              value: "true"
            - name: HASURA_GRAPHQL_V1_BOOLEAN_NULL_COLLAPSE
              value: "true"
            - name: HASURA_GRAPHQL_SERVER_PORT
              value: "3000"
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
---
# Source: prefect-server/templates/towel/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prefect-towel
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: towel
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prefect-server
      app.kubernetes.io/instance:  prefect
      app.kubernetes.io/component: towel
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prefect-server
        app.kubernetes.io/instance:  prefect
        app.kubernetes.io/component: towel
    spec:
      serviceAccountName: prefect-serviceaccount
      containers:
        - name: towel
          image: "prefecthq/server:latest"
          imagePullPolicy: Always
          command:
            - python 
            - src/prefect_server/services/towel/__main__.py
          env:
            - name: PREFECT_SERVER__HASURA__HOST
              value: prefect-hasura.default
            - name: PREFECT_SERVER__API__URL
              value: http://prefect-hasura.default:3000/v1alpha1/graphql
            - name: PREFECT_SERVER__DATABASE__HOST
              value: prefect-postgresql.default
            - name: PREFECT_SERVER__DATABASE__PORT
              value: 
            - name: PREFECT_SERVER__DATABASE__USERNAME
              value: 
            - name: PREFECT_SERVER__DATABASE__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: prefect-postgresql
                  key: postgres-password
            - name: PREFECT_SERVER__HASURA__HOST
              value: prefect-hasura.default
            - name: PREFECT_SERVER__HASURA__PORT
              value: "3000"
            - name: PREFECT_SERVER__SERVICES__APOLLO__PORT
              value: "4200"
            - name: PREFECT_SERVER__SERVICES__GRAPHQL__PORT
              value: "4201"
---
# Source: prefect-server/templates/ui/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prefect-ui
  labels:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance:  prefect
    helm.sh/chart: prefect-server-0.0.0
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ui
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prefect-server
      app.kubernetes.io/instance:  prefect
      app.kubernetes.io/component: ui
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prefect-server
        app.kubernetes.io/instance:  prefect
        app.kubernetes.io/component: ui
    spec:
      serviceAccountName: prefect-serviceaccount
      containers:
        - name: ui
          image: "prefecthq/ui:latest"
          imagePullPolicy: Always
          command: 
            - "/intercept.sh"
          env:
            - name: PREFECT_SERVER__APOLLO_URL
              value: http://run.nasajonsistemas.com.br/graphql
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
---
# Source: prefect-server/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prefect-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.16
    app.kubernetes.io/instance: prefect
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: prefect-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: prefect
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: prefect-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.6.16
        app.kubernetes.io/instance: prefect
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: prefect
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.4.0-debian-11-r9
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "prefect"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: prefect-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: prefect-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "prefect"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "prefect" -d "dbname=prefect" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "prefect" -d "dbname=prefect" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
        - name: data
          emptyDir: {}
